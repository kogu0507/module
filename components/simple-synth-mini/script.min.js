export class SimpleSynthMini{constructor(t){this.container=t,this.audioContext=null,this.gainNode=null,this.oscillators={},this.settings=this._readSettingsFromDataAttributes(),this.init()}_readSettingsFromDataAttributes(){return{volumeSlider:"true"===this.container.dataset.volumeSlider,octaves:parseInt(this.container.dataset.octaves,10)||1,startNote:this.container.dataset.startNote||"C4",soundEnabled:"true"===this.container.dataset.soundEnabled,instrument:this.container.dataset.instrument||"sine",showNoteLabels:"true"===this.container.dataset.showNoteLabels}}init(){this.renderUI(),this.updateLabelVisibility(),this.attachEventListeners()}initAudio(){if(!this.audioContext)try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.gainNode=this.audioContext.createGain(),this.gainNode.connect(this.audioContext.destination),this.gainNode.gain.value=.5}catch(t){console.error("Web Audio API 初期化失敗:",t),this.settings.soundEnabled=!1}else"suspended"===this.audioContext.state&&this.audioContext.resume().then(()=>{console.log("AudioContext resumed.")})}renderUI(){this.container.innerHTML="";const t=this.createKeyboardSVG();if(this.container.insertAdjacentHTML("beforeend",t),this.settings.volumeSlider){const t=document.createElement("div");t.className="ssm-volume-control",t.innerHTML=`
                <label for="vol-${this.container.id}">Volume:</label>
                <input type="range" id="vol-${this.container.id}" min="0" max="1" step="0.01" value="0.5">
            `,this.container.appendChild(t);const e=t.querySelector(`#vol-${this.container.id}`);e.addEventListener("input",t=>{this.updateVolume(parseFloat(t.target.value))})}}createKeyboardSVG(){const t=7,e=this.settings.octaves*t,s=200/t,i=.6*s,o=60,n=this.noteToMidi(this.settings.startNote),a=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],l=["C","D","E","F","G","A","B"],r=["C#","D#","F#","G#","A#"];let c=`<svg viewBox="0 0 ${e*s} 100" role="application" aria-label="ピアノ鍵盤"><defs>
            <rect id="w" width="${s}" height="100"/>
            <rect id="b" width="${i}" height="${o}"/>
        </defs>`;for(let e=0;e<this.settings.octaves;e++){let t=0;a.forEach((o,a)=>{if(l.includes(o)){const l=n+12*e+a,r=this.midiToNote(l),d=t*s+e*s*7;c+=`<g transform="translate(${d},0)">
                                <use href="#w" class="key white-key" data-note="${r}" />
                                <text x="${s/2}" y="90" class="note-label">${r}</text>
                            </g>`,t++}})}for(let t=0;t<this.settings.octaves;t++)a.forEach((e,o)=>{if(r.includes(e)){const a=n+12*t+o,l=this.midiToNote(a);let d;if("C#"===e)d=1;else if("D#"===e)d=2;else if("F#"===e)d=4;else if("G#"===e)d=5;else if("A#"===e)d=6;const h=d*s-i/2+t*s*7;c+=`<g transform="translate(${h},0)">
                                <use href="#b" class="key black-key" data-note="${l}" />
                                <text x="${i/2}" y="50" class="note-label black-key-label">${l}</text>
                            </g>`}});return c+`</svg>`}attachEventListeners(){this.container.querySelectorAll(".key").forEach(t=>{const e=t.dataset.note,s=()=>{t.classList.add("active"),this.settings.soundEnabled&&this.playNote(e)},i=()=>{t.classList.remove("active"),this.settings.soundEnabled&&this.stopNote(e)};t.addEventListener("mousedown",s),t.addEventListener("mouseup",i),t.addEventListener("mouseleave",i),t.addEventListener("touchstart",t=>{t.preventDefault(),s()},{passive:!1}),t.addEventListener("touchend",i),t.addEventListener("touchcancel",i)})}playNote(t){if(this.initAudio(),!this.audioContext)return;this.oscillators[t]&&this.stopNote(t);const e=this.noteToFrequency(t);if(null==e)return;const s=this.audioContext.createOscillator();s.type=this.settings.instrument,s.frequency.setValueAtTime(e,this.audioContext.currentTime),s.connect(this.gainNode),s.start(),this.oscillators[t]=s,this.container.dispatchEvent(new CustomEvent("ssm-key-down",{detail:{note:t,frequency:e,midi:this.noteToMidi(t),instrument:this.settings.instrument}}))}stopNote(t){const e=this.oscillators[t];e&&(e.stop(this.audioContext.currentTime+.05),e.disconnect(),delete this.oscillators[t],this.container.dispatchEvent(new CustomEvent("ssm-key-up",{detail:{note:t,midi:this.noteToMidi(t)}})))}updateVolume(t){this.gainNode&&(this.gainNode.gain.value=t)}noteToMidi(t){const e=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],s=t.slice(0,-1),i=parseInt(t.slice(-1),10),o=e.indexOf(s);return o<0?null:o+(i+1)*12}midiToNote(t){const e=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],s=Math.floor(t/12)-1,i=t%12;return e[i]+s}noteToFrequency(t){const e=this.noteToMidi(t);return 440*Math.pow(2,(e-69)/12)}updateLabelVisibility(){this.settings.showNoteLabels?this.container.classList.remove("ssm-no-labels"):this.container.classList.add("ssm-no-labels")}updateSettings(){this.settings=this._readSettingsFromDataAttributes(),this.renderUI(),this.updateLabelVisibility(),this.attachEventListeners()}}